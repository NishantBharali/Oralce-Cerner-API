// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Your test1 check for test cases 1`] = `
ReactShallowRenderer {
  "_context": Object {},
  "_didScheduleRenderPhaseUpdate": false,
  "_dispatcher": Object {
    "readContext": [Function],
    "useCallback": [Function],
    "useContext": [Function],
    "useDebugValue": [Function],
    "useDeferredValue": [Function],
    "useEffect": [Function],
    "useId": [Function],
    "useImperativeHandle": [Function],
    "useInsertionEffect": [Function],
    "useLayoutEffect": [Function],
    "useMemo": [Function],
    "useReducer": [Function],
    "useRef": [Function],
    "useResponder": [Function],
    "useState": [Function],
    "useSyncExternalStore": [Function],
    "useTransition": [Function],
  },
  "_element": <Provider
    store={
      Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <AllIdeaDetails />
  </Provider>,
  "_firstWorkInProgressHook": Object {
    "memoizedState": Array [
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Object {
          "addNestedSub": [Function],
          "getListeners": [Function],
          "handleChangeWrapper": [Function],
          "isSubscribed": [Function],
          "notifyNestedSubs": [Function],
          "trySubscribe": [Function],
          "tryUnsubscribe": [Function],
        },
      },
      Array [
        Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      ],
    ],
    "next": Object {
      "memoizedState": Array [
        Object {
          "allIdeas": Object {
            "idea": Object {},
            "ideas": Array [],
          },
          "idea": Object {
            "idea": Object {},
            "ideas": Array [],
          },
        },
        Array [
          Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        ],
      ],
      "next": null,
      "queue": null,
    },
    "queue": null,
  },
  "_forcedUpdate": false,
  "_idCounter": 0,
  "_instance": null,
  "_isReRender": false,
  "_newState": null,
  "_numberOfReRenders": 0,
  "_renderPhaseUpdates": null,
  "_rendered": <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Object {
          "addNestedSub": [Function],
          "getListeners": [Function],
          "handleChangeWrapper": [Function],
          "isSubscribed": [Function],
          "notifyNestedSubs": [Function],
          "trySubscribe": [Function],
          "tryUnsubscribe": [Function],
        },
      }
    }
  >
    <AllIdeaDetails />
  </Context.Provider>,
  "_rendering": false,
  "_updater": Updater {
    "_callbacks": Array [],
    "_renderer": [Circular],
  },
  "_workInProgressHook": null,
}
`;

exports[`Your test1 check for test cases app 1`] = `
ReactShallowRenderer {
  "_context": Object {},
  "_didScheduleRenderPhaseUpdate": false,
  "_dispatcher": Object {
    "readContext": [Function],
    "useCallback": [Function],
    "useContext": [Function],
    "useDebugValue": [Function],
    "useDeferredValue": [Function],
    "useEffect": [Function],
    "useId": [Function],
    "useImperativeHandle": [Function],
    "useInsertionEffect": [Function],
    "useLayoutEffect": [Function],
    "useMemo": [Function],
    "useReducer": [Function],
    "useRef": [Function],
    "useResponder": [Function],
    "useState": [Function],
    "useSyncExternalStore": [Function],
    "useTransition": [Function],
  },
  "_element": <Provider
    store={
      Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <UNDEFINED />
  </Provider>,
  "_firstWorkInProgressHook": Object {
    "memoizedState": Array [
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Object {
          "addNestedSub": [Function],
          "getListeners": [Function],
          "handleChangeWrapper": [Function],
          "isSubscribed": [Function],
          "notifyNestedSubs": [Function],
          "trySubscribe": [Function],
          "tryUnsubscribe": [Function],
        },
      },
      Array [
        Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      ],
    ],
    "next": Object {
      "memoizedState": Array [
        Object {
          "allIdeas": Object {
            "idea": Object {},
            "ideas": Array [],
          },
          "idea": Object {
            "idea": Object {},
            "ideas": Array [],
          },
        },
        Array [
          Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        ],
      ],
      "next": null,
      "queue": null,
    },
    "queue": null,
  },
  "_forcedUpdate": false,
  "_idCounter": 0,
  "_instance": null,
  "_isReRender": false,
  "_newState": null,
  "_numberOfReRenders": 0,
  "_renderPhaseUpdates": null,
  "_rendered": <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Object {
          "addNestedSub": [Function],
          "getListeners": [Function],
          "handleChangeWrapper": [Function],
          "isSubscribed": [Function],
          "notifyNestedSubs": [Function],
          "trySubscribe": [Function],
          "tryUnsubscribe": [Function],
        },
      }
    }
  >
    <UNDEFINED />
  </Context.Provider>,
  "_rendering": false,
  "_updater": Updater {
    "_callbacks": Array [],
    "_renderer": [Circular],
  },
  "_workInProgressHook": null,
}
`;

exports[`Your test1 check for test cases2 1`] = `
ReactShallowRenderer {
  "_context": Object {},
  "_didScheduleRenderPhaseUpdate": false,
  "_dispatcher": Object {
    "readContext": [Function],
    "useCallback": [Function],
    "useContext": [Function],
    "useDebugValue": [Function],
    "useDeferredValue": [Function],
    "useEffect": [Function],
    "useId": [Function],
    "useImperativeHandle": [Function],
    "useInsertionEffect": [Function],
    "useLayoutEffect": [Function],
    "useMemo": [Function],
    "useReducer": [Function],
    "useRef": [Function],
    "useResponder": [Function],
    "useState": [Function],
    "useSyncExternalStore": [Function],
    "useTransition": [Function],
  },
  "_element": <Provider
    store={
      Object {
        "@@observable": [Function],
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <UpdateIdea />
  </Provider>,
  "_firstWorkInProgressHook": Object {
    "memoizedState": Array [
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Object {
          "addNestedSub": [Function],
          "getListeners": [Function],
          "handleChangeWrapper": [Function],
          "isSubscribed": [Function],
          "notifyNestedSubs": [Function],
          "trySubscribe": [Function],
          "tryUnsubscribe": [Function],
        },
      },
      Array [
        Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      ],
    ],
    "next": Object {
      "memoizedState": Array [
        Object {
          "allIdeas": Object {
            "idea": Object {},
            "ideas": Array [],
          },
          "idea": Object {
            "idea": Object {},
            "ideas": Array [],
          },
        },
        Array [
          Object {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        ],
      ],
      "next": null,
      "queue": null,
    },
    "queue": null,
  },
  "_forcedUpdate": false,
  "_idCounter": 0,
  "_instance": null,
  "_isReRender": false,
  "_newState": null,
  "_numberOfReRenders": 0,
  "_renderPhaseUpdates": null,
  "_rendered": <Context.Provider
    value={
      Object {
        "store": Object {
          "@@observable": [Function],
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Object {
          "addNestedSub": [Function],
          "getListeners": [Function],
          "handleChangeWrapper": [Function],
          "isSubscribed": [Function],
          "notifyNestedSubs": [Function],
          "trySubscribe": [Function],
          "tryUnsubscribe": [Function],
        },
      }
    }
  >
    <UpdateIdea />
  </Context.Provider>,
  "_rendering": false,
  "_updater": Updater {
    "_callbacks": Array [],
    "_renderer": [Circular],
  },
  "_workInProgressHook": null,
}
`;
